Index: app/src/main/java/com/example/app_jdp_gestion_gastos/ui/fragments/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_jdp_gestion_gastos.ui.fragments\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.animation.AnimationUtils\nimport android.view.animation.ScaleAnimation\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.navigation.fragment.findNavController\nimport com.example.app_jdp_gestion_gastos.R\nimport com.example.app_jdp_gestion_gastos.data.repository.UserRepository\nimport com.example.app_jdp_gestion_gastos.databinding.FragmentLoginBinding\nimport com.example.app_jdp_gestion_gastos.ui.viewmodel.AppViewModelFactory\nimport com.example.app_jdp_gestion_gastos.ui.viewmodel.UserViewModel\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.firestore.FirebaseFirestore\n\n\nclass LoginFragment : Fragment() {\n\n    private var _binding: FragmentLoginBinding? = null\n    private val binding get() = _binding!!\n\n    //Inicio del UserRepository\n    private val userRepository by lazy {\n        UserRepository(\n            FirebaseAuth.getInstance(),\n            FirebaseFirestore.getInstance()\n        )\n\n    }\n\n    //Inicio del UserViewModel que recibe el reposotory a traves de ViewModdel factory\n    private val userViewModel: UserViewModel by viewModels {\n        AppViewModelFactory(userRepository)\n    }\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        _binding = FragmentLoginBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        // TODO: VARIABLES\n        // Animación del titulo\n        val fadeIn = AnimationUtils.loadAnimation(requireContext(), R.anim.fade_in)\n        binding.tvTitulo.startAnimation(fadeIn)\n\n        // Aplicar la animación a otros elementos\n        binding.etMail.startAnimation(fadeIn)\n        binding.etPassword.startAnimation(fadeIn)\n        binding.btnLogin.startAnimation(fadeIn)\n        binding.ivFondo.startAnimation(fadeIn)\n        binding.tvCrearCuenta.startAnimation(fadeIn)\n\n        // Agregar animaciones de foco a los EditText\n        applyFocusAnimations()\n\n\n        //LOGIN EN FIREBASE\n        binding.btnLogin.setOnClickListener {\n            //Variables  necesarias para el login.\n            val mail = binding.etMail.text.toString().trim()\n            val password = binding.etPassword.text.toString().trim()\n            //Metodo en el userViewModel\n            userViewModel.loginUser(mail, password) { userId, error ->\n                if (userId != null) {\n                    findNavController().navigate(R.id.action_loginFragment_to_statsFragment)\n                } else {\n                    Toast.makeText(requireContext(), \"Usuario no encontrado\", Toast.LENGTH_SHORT)\n                        .show()\n                }\n            }\n        }\n        // Navegación a la pantalla de registro\n        binding.tvCrearCuenta.setOnClickListener {\n            findNavController().navigate(R.id.action_loginFragment_to_registroFragment)\n        }\n    }\n\n    private fun applyFocusAnimations() {\n        val fondo = binding.ivFondo\n\n        binding.etMail.setOnFocusChangeListener { _, hasFocus ->\n            fondo.startAnimation(createScaleAnimation(if (hasFocus) 1.0f else 1.2f, if (hasFocus) 1.2f else 1.0f))\n        }\n\n        binding.etPassword.setOnFocusChangeListener { _, hasFocus ->\n            fondo.startAnimation(createScaleAnimation(if (hasFocus) 1.0f else 1.2f, if (hasFocus) 1.2f else 1.0f))\n        }\n    }\n\n    private fun createScaleAnimation(from: Float, to: Float): ScaleAnimation {\n        return ScaleAnimation(\n            from, to,\n            from, to,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f\n        ).apply {\n            duration = 300\n            fillAfter = true\n        }\n    }\n\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n\n/*EVENTOS FOCUS MAIL Y PASWORD\netMail.setOnFocusChangeListener { _, hasFocus ->\n    if (hasFocus) {\n        // Zoom In\n        val zoomIn = ScaleAnimation(\n            1.0f, 1.2f, // Escala en X\n            1.0f, 1.2f, // Escala en Y\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f\n        ).apply {\n            duration = 300 // Duración en milisegundos\n            fillAfter = true // mantien el estado final\n        }\n        fondoImagen.startAnimation(zoomIn)\n    } else {\n        // Zoom Out\n        val zoomOut = ScaleAnimation(\n            1.2f, 1.0f,\n            1.2f, 1.0f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f\n        ).apply {\n            duration = 300\n            fillAfter = true\n        }\n        fondoImagen.startAnimation(zoomOut)\n    }\n}\netPassword.setOnFocusChangeListener { _, hasFocus ->\n    if (hasFocus) {\n        // Zoom In\n        val zoomIn = ScaleAnimation(\n            1.0f, 1.2f, // Escala en X\n            1.0f, 1.2f, // Escala en Y\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f\n        ).apply {\n            duration = 300 // Duración en milisegundos\n            fillAfter = true // mantien el estado final\n        }\n        fondoImagen.startAnimation(zoomIn)\n    } else {\n        // Zoom Out\n        val zoomOut = ScaleAnimation(\n            1.2f, 1.0f,\n            1.2f, 1.0f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f,\n            ScaleAnimation.RELATIVE_TO_SELF, 0.5f\n        ).apply {\n            duration = 300\n            fillAfter = true\n        }\n        fondoImagen.startAnimation(zoomOut)\n    }\n}*/\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_jdp_gestion_gastos/ui/fragments/LoginFragment.kt b/app/src/main/java/com/example/app_jdp_gestion_gastos/ui/fragments/LoginFragment.kt
--- a/app/src/main/java/com/example/app_jdp_gestion_gastos/ui/fragments/LoginFragment.kt	(revision 0c648d39246f46b2f230353ae9281f9ee17a5751)
+++ b/app/src/main/java/com/example/app_jdp_gestion_gastos/ui/fragments/LoginFragment.kt	(date 1742056504577)
@@ -74,6 +74,8 @@
             //Metodo en el userViewModel
             userViewModel.loginUser(mail, password) { userId, error ->
                 if (userId != null) {
+                    Toast.makeText(requireContext(), "Login Correcto, Bienvenido", Toast.LENGTH_SHORT)
+                        .show()
                     findNavController().navigate(R.id.action_loginFragment_to_statsFragment)
                 } else {
                     Toast.makeText(requireContext(), "Usuario no encontrado", Toast.LENGTH_SHORT)
