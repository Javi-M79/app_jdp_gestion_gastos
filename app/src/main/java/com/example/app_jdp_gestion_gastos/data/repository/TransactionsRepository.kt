package com.example.app_jdp_gestion_gastos.data.repositoryimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.FirebaseFirestoreimport kotlinx.coroutines.tasks.awaitclass TransactionsRepository {    private val db = FirebaseFirestore.getInstance()    private val auth = FirebaseAuth.getInstance()    suspend fun getIncomes(): List<Income> {        val userId = auth.currentUser?.uid ?: "usuario_demo"        return try {            db.collection("incomes").whereEqualTo("userId", userId).get().await().toObjects(Income::class.java)        } catch (e: Exception) {            emptyList()        }    }    suspend fun getExpenses(): List<Expense> {        val userId = auth.currentUser?.uid ?: "usuario_demo"        return try {            db.collection("expenses").whereEqualTo("userId", userId).get().await().toObjects(Expense::class.java)        } catch (e: Exception) {            emptyList()        }    }    suspend fun addIncome(income: Income): Boolean {        return try {            db.collection("incomes").add(income).await()            true        } catch (e: Exception) {            false        }    }    suspend fun addExpense(expense: Expense): Boolean {        return try {            db.collection("expenses").add(expense).await()            true        } catch (e: Exception) {            false        }    }}