package com.example.app_jdp_gestion_gastos.data.repositoryimport android.util.Logimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.FirebaseFirestoreimport kotlinx.coroutines.tasks.awaitimport java.util.*class GroupChartRepository {    private val db = FirebaseFirestore.getInstance()    private val auth = FirebaseAuth.getInstance()    suspend fun getExpenses(month: Int, year: Int): List<Expense> {        val userId = auth.currentUser?.uid ?: return emptyList()        return try {            val startDate = Calendar.getInstance().apply {                set(year, month, 1, 0, 0, 0)                set(Calendar.MILLISECOND, 0)            }.time            val endDate = Calendar.getInstance().apply {                set(year, month, 1, 23, 59, 59)                add(Calendar.MONTH, 1)                set(Calendar.MILLISECOND, 0)            }.time            val snapshot = db.collection("expenses")                .whereEqualTo("userId", userId)                .whereGreaterThanOrEqualTo("date", startDate)                .whereLessThan("date", endDate)                .get()                .await()            val expenses = snapshot.toObjects(Expense::class.java)            Log.d("GroupChartRepository", "Expenses: $expenses")            expenses        } catch (e: Exception) {            Log.e("GroupChartRepository", "Error al obtener gastos", e)            emptyList()        }    }    suspend fun getIncomes(month: Int, year: Int): List<Income> {        val userId = auth.currentUser?.uid ?: return emptyList()        return try {            val startDate = Calendar.getInstance().apply {                set(year, month, 1, 0, 0, 0)                set(Calendar.MILLISECOND, 0)            }.time            val endDate = Calendar.getInstance().apply {                set(year, month, 1, 23, 59, 59)                add(Calendar.MONTH, 1)                set(Calendar.MILLISECOND, 0)            }.time            val snapshot = db.collection("incomes")                .whereEqualTo("userId", userId)                .whereGreaterThanOrEqualTo("date", startDate)                .whereLessThan("date", endDate)                .get()                .await()            val incomes = snapshot.toObjects(Income::class.java)            Log.d("GroupChartRepository", "Incomes: $incomes")            incomes        } catch (e: Exception) {            Log.e("GroupChartRepository", "Error al obtener ingresos", e)            emptyList()        }    }}