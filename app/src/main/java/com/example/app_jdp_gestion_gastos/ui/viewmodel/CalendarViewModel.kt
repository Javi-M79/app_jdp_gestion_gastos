package com.example.app_jdp_gestion_gastos.ui.viewmodelimport CalendarRepositoryimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeimport com.google.firebase.Timestampimport java.text.SimpleDateFormatimport java.util.*class CalendarViewModel : ViewModel() {    private val repository = CalendarRepository()    private val _incomeTransactions = MutableLiveData<List<Income>>()    val incomeTransactions: LiveData<List<Income>> get() = _incomeTransactions    private val _expenseTransactions = MutableLiveData<List<Expense>>()    val expenseTransactions: LiveData<List<Expense>> get() = _expenseTransactions    fun loadAllTransactions(userId: String) {        repository.getAllIncomes(userId) { incomes ->            _incomeTransactions.postValue(incomes ?: emptyList())        }        repository.getAllExpenses(userId) { expenses ->            _expenseTransactions.postValue(expenses ?: emptyList())        }    }    fun loadIncomesForDate(date: String) {        val formattedDate = formatDate(date)        Log.d("CalendarViewModel", "Cargando ingresos para la fecha: $formattedDate")        repository.getIncomeForDate(formattedDate) { incomes ->            Log.d("CalendarViewModel", "Ingresos obtenidos: ${incomes.size}")            _incomeTransactions.postValue(incomes ?: emptyList())        }    }    fun loadExpensesForDate(date: String) {        val formattedDate = formatDate(date)        Log.d("CalendarViewModel", "Cargando gastos para la fecha: $formattedDate")        repository.getExpenseForDate(formattedDate) { expenses ->            Log.d("CalendarViewModel", "Gastos obtenidos: ${expenses.size}")            _expenseTransactions.postValue(expenses ?: emptyList())        }    }    fun addIncome(income: Income) {        repository.saveIncome(income) { success ->            if (success) {                income.date?.toDate()?.let { date ->                    val formattedDate = formatDate(date)                    loadIncomesForDate(formattedDate)                }            }        }    }    fun addExpense(expense: Expense) {        repository.saveExpense(expense) { success ->            if (success) {                expense.date?.toDate()?.let { date ->                    val formattedDate = formatDate(date)                    loadExpensesForDate(formattedDate)                }            }        }    }    fun clearIncomeTransactions() {        _incomeTransactions.postValue(emptyList())    }    fun clearExpenseTransactions() {        _expenseTransactions.postValue(emptyList())    }    private fun formatDate(date: Any): String {        val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())        return when (date) {            is String -> date            is Date -> dateFormat.format(date)            else -> ""        }    }}