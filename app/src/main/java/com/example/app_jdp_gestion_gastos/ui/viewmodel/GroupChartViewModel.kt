package com.example.app_jdp_gestion_gastos.ui.viewmodelimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.ViewModelProviderimport androidx.lifecycle.viewModelScopeimport com.example.app_jdp_gestion_gastos.data.repository.GroupChartRepositoryimport com.google.firebase.auth.FirebaseAuthimport kotlinx.coroutines.launchclass GroupChartViewModel(private val repository: GroupChartRepository) : ViewModel() {    private val auth = FirebaseAuth.getInstance()    private val _barChartData = MutableLiveData<Pair<Float, Float>>()    val barChartData: LiveData<Pair<Float, Float>> get() = _barChartData    private val _groupId = MutableLiveData<String?>()    val groupId: LiveData<String?> get() = _groupId    private var isGroupMode: Boolean = false    fun setGroupMode(groupMode: Boolean) {        isGroupMode = groupMode    }    fun loadData(month: Int, year: Int) {        viewModelScope.launch {            if (isGroupMode) {                val email = auth.currentUser?.email                if (email != null) {                    // Asumo que tienes este m√©todo en el repositorio, si no, debes implementarlo                    val groupIdValue = repository.getGroupIdByUserEmail(email)                    _groupId.postValue(groupIdValue)                    if (groupIdValue != null) {                        val expenses = repository.getExpenses(month, year, groupIdValue)                        val incomes = repository.getIncomes(month, year, groupIdValue)                        val totalExpenses = expenses.sumOf { it.amount.toDouble() }.toFloat()                        val totalIncomes = incomes.sumOf { it.amount.toDouble() }.toFloat()                        _barChartData.postValue(Pair(totalIncomes, totalExpenses))                    } else {                        _barChartData.postValue(Pair(0f, 0f))                    }                } else {                    _barChartData.postValue(Pair(0f, 0f))                }            } else {                val expenses = repository.getExpenses(month, year, null)                val incomes = repository.getIncomes(month, year, null)                val totalExpenses = expenses.sumOf { it.amount.toDouble() }.toFloat()                val totalIncomes = incomes.sumOf { it.amount.toDouble() }.toFloat()                _barChartData.postValue(Pair(totalIncomes, totalExpenses))                _groupId.postValue(null)            }        }    }}class GroupChartViewModelFactory(    private val repository: GroupChartRepository) : ViewModelProvider.Factory {    override fun <T : ViewModel> create(modelClass: Class<T>): T {        if (modelClass.isAssignableFrom(GroupChartViewModel::class.java)) {            @Suppress("UNCHECKED_CAST")            return GroupChartViewModel(repository) as T        }        throw IllegalArgumentException("Unknown ViewModel class")    }}