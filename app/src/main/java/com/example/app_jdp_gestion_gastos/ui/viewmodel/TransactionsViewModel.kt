package com.example.app_jdp_gestion_gastos.ui.viewmodelimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeimport com.example.app_jdp_gestion_gastos.data.repository.TransactionsRepositoryimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.launchclass TransactionsViewModel(private val repository: TransactionsRepository) : ViewModel() {    private val _incomes = MutableStateFlow<List<Income>>(emptyList())    val incomes: StateFlow<List<Income>> get() = _incomes    private val _expenses = MutableStateFlow<List<Expense>>(emptyList())    val expenses: StateFlow<List<Expense>> get() = _expenses    fun fetchIncomes() {        viewModelScope.launch {            _incomes.value = repository.getIncomes()        }    }    fun fetchExpenses() {        viewModelScope.launch {            _expenses.value = repository.getExpenses()        }    }    fun addIncome(income: Income, callback: (Boolean) -> Unit) {        viewModelScope.launch {            val success = repository.addIncome(income)            if (success) fetchIncomes()            callback(success)        }    }    fun addExpense(expense: Expense, callback: (Boolean) -> Unit) {        viewModelScope.launch {            val success = repository.addExpense(expense)            if (success) fetchExpenses()            callback(success)        }    }    fun deleteTransaction(transactionId: String, callback: (Boolean) -> Unit) {        viewModelScope.launch {            val success = repository.deleteTransaction(transactionId)            callback(success)        }    }}