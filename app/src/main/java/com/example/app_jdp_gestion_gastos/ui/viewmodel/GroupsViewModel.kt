package com.example.app_jdp_gestion_gastos.ui.viewmodelimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.app_jdp_gestion_gastos.data.model.Groupimport com.example.app_jdp_gestion_gastos.data.repository.GroupRepositoryimport com.google.firebase.Timestampimport com.google.firebase.auth.FirebaseAuthimport kotlinx.coroutines.launchclass GroupsViewModel : ViewModel() {    private val auth = FirebaseAuth.getInstance()    private val repository = GroupRepository()    private val _groups = MutableLiveData<List<Group>>()    val groups: LiveData<List<Group>> get() = _groups    private val _isLoading = MutableLiveData<Boolean>(true)    val isLoading: LiveData<Boolean> get() = _isLoading    private val _selectedGroup = MutableLiveData<Group?>()    val selectedGroup: LiveData<Group?> get() = _selectedGroup    private var listenerStarted = false    init {        startListeningToGroups()    }    fun startListeningToGroups() {        if (listenerStarted) return        listenerStarted = true        val userEmail = auth.currentUser?.email ?: return        _isLoading.value = true        repository.listenToUserGroups(userEmail) { updatedGroups ->            _groups.postValue(updatedGroups)            _isLoading.postValue(false)        }    }    fun loadGroups() {        val userEmail = auth.currentUser?.email ?: return        _isLoading.value = true        viewModelScope.launch {            try {                _groups.value = repository.getUserGroups(userEmail)            } catch (e: Exception) {                Log.e("GroupsViewModel", "Error al cargar grupos", e)            } finally {                _isLoading.value = false            }        }    }    fun createGroup(name: String) {        val userEmail = auth.currentUser?.email ?: return        val newGroup = Group(            name = name,            createdBy = userEmail,            members = listOf(userEmail),            createdAt = Timestamp.now()        )        viewModelScope.launch {            try {                repository.createGroup(newGroup)                loadGroups() // Recargar tras crear            } catch (e: Exception) {                Log.e("GroupsViewModel", "Error creando grupo", e)            }        }    }    fun selectGroup(group: Group?) {        _selectedGroup.value = group    }    fun deleteSelectedGroup() {        val group = selectedGroup.value ?: return        viewModelScope.launch {            try {                repository.deleteGroup(group.id)                selectGroup(null)                loadGroups()            } catch (e: Exception) {                Log.e("GroupsViewModel", "Error al borrar grupo: ${e.message}")            }        }    }}