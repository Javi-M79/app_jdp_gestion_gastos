package com.example.app_jdp_gestion_gastos.ui.dialogimport android.app.Dialogimport android.graphics.Colorimport android.os.Bundleimport android.text.Spannableimport android.text.SpannableStringimport android.text.SpannableStringBuilderimport android.text.style.ForegroundColorSpanimport android.view.Windowimport android.widget.Buttonimport android.widget.TextViewimport androidx.fragment.app.DialogFragmentimport com.example.app_jdp_gestion_gastos.Rimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeclass CalendaryDialog(    private val selectedDate: String,    private var incomes: List<Income>,    private var expenses: List<Expense>) : DialogFragment() {    private var onDismissListener: (() -> Unit)? = null    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        val dialog = Dialog(requireContext())        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.setContentView(R.layout.dialog_transactions)        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)        val titleTextView = dialog.findViewById<TextView>(R.id.tvDialogTitle)        val detailsTextView = dialog.findViewById<TextView>(R.id.tvTransactionDetails)        val closeButton = dialog.findViewById<Button>(R.id.btnClose)        titleTextView.text = "Transacciones del $selectedDate"        updateTransactionDetails(detailsTextView)        closeButton.setOnClickListener {            dismiss()        }        return dialog    }    private fun updateTransactionDetails(detailsTextView: TextView) {        val spannableBuilder = SpannableStringBuilder()        // Verificamos si no hay ingresos ni gastos        if (incomes.isEmpty() && expenses.isEmpty()) {            // Si ambas listas están vacías, mostramos el mensaje            spannableBuilder.append("No hay transacciones para esta fecha.")        } else {            // Si hay ingresos, los mostramos            incomes.forEach { income ->                val transactionText = "Ingreso - ${income.name}: ${"%.2f".format(income.amount)} €\n"                val spannableString = SpannableString(transactionText)                spannableString.setSpan(                    ForegroundColorSpan(Color.GREEN),                    0, transactionText.length,                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE                )                spannableBuilder.append(spannableString)            }            // Si hay gastos, los mostramos            expenses.forEach { expense ->                val transactionText = "Gasto - ${expense.name}: ${"%.2f".format(expense.amount)} €\n"                val spannableString = SpannableString(transactionText)                spannableString.setSpan(                    ForegroundColorSpan(Color.RED),                    0, transactionText.length,                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE                )                spannableBuilder.append(spannableString)            }        }        // Establecer el texto final en el TextView        detailsTextView.text = spannableBuilder    }    fun updateData(newIncomes: List<Income>, newExpenses: List<Expense>) {        this.incomes = newIncomes        this.expenses = newExpenses    }    fun setOnDismissListener(listener: () -> Unit) {        onDismissListener = listener    }    override fun onDismiss(dialog: android.content.DialogInterface) {        super.onDismiss(dialog)        onDismissListener?.invoke()    }}