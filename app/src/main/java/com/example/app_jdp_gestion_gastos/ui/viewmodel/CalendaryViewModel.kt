package com.example.app_jdp_gestion_gastos.ui.viewmodelimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.app_jdp_gestion_gastos.data.model.Expenseimport com.example.app_jdp_gestion_gastos.data.model.Incomeimport com.example.app_jdp_gestion_gastos.data.repository.CalendaryRepositoryclass CalendaryViewModel : ViewModel() {    private val repository = CalendaryRepository()    private val _incomeTransactions = MutableLiveData<List<Income>>()    val incomeTransactions: LiveData<List<Income>> get() = _incomeTransactions    private val _expenseTransactions = MutableLiveData<List<Expense>>()    val expenseTransactions: LiveData<List<Expense>> get() = _expenseTransactions    // Cargar todos los ingresos y gastos para un usuario    fun loadAllTransactions(userId: String) {        repository.getAllIncomes(userId) { incomes ->            _incomeTransactions.postValue(incomes ?: emptyList())        }        repository.getAllExpenses(userId) { expenses ->            _expenseTransactions.postValue(expenses ?: emptyList())        }    }    // Cargar ingresos para una fecha específica    fun loadIncomesForDate(date: String) {        repository.getIncomeForDate(date) { incomes ->            _incomeTransactions.postValue(incomes ?: emptyList()) // Asegura que nunca es null        }    }    fun loadExpensesForDate(date: String) {        repository.getExpenseForDate(date) { expenses ->            _expenseTransactions.postValue(expenses ?: emptyList()) // Asegura que nunca es null        }    }    // Guardar un ingreso    fun addIncome(income: Income) {        repository.saveIncome(income) { success ->            if (success) {                loadIncomesForDate(income.date?.toDate().toString()) // Actualizar después de guardar            }        }    }    // Guardar un gasto    fun addExpense(expense: Expense) {        repository.saveExpense(expense) { success ->            if (success) {                loadExpensesForDate(expense.date?.toDate().toString()) // Actualizar después de guardar            }        }    }    // Eliminar un ingreso    fun clearIncomeTransactions() {        _incomeTransactions.postValue(emptyList())    }    fun clearExpenseTransactions() {        _expenseTransactions.postValue(emptyList())    }}