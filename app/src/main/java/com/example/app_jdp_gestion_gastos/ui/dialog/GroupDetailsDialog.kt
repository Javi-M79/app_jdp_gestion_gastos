package com.example.app_jdp_gestion_gastos.ui.dialogimport android.app.Dialogimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport androidx.fragment.app.DialogFragmentimport com.example.app_jdp_gestion_gastos.data.model.Groupimport com.example.app_jdp_gestion_gastos.databinding.DialogGroupDetailsBindingimport com.google.firebase.Timestampimport java.text.SimpleDateFormatimport java.util.Localeclass GroupDetailsDialog : DialogFragment() {    private var _binding: DialogGroupDetailsBinding? = null    private val binding get() = _binding!!    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        _binding = DialogGroupDetailsBinding.inflate(LayoutInflater.from(context))        val group = arguments?.getSerializable("group") as? Group            ?: throw IllegalArgumentException("Group is required")        // Configurar la vista con los datos del grupo        binding.apply {            tvGroupName.text = group.name            tvCreatedBy.text = "Creado por: ${group.createdBy}"            tvMembers.text = "Miembros: ${group.members.joinToString(", ")}"            tvCreatedAt.text = "Fecha de creaci√≥n: ${formatTimestamp(group.createdAt)}"            tvExpenses.text = "Gastos: ${group.expenses.joinToString(", ")}"            btnClose.setOnClickListener {                dismiss()            }        }        return Dialog(requireContext()).apply {            setContentView(binding.root)        }    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }    companion object {        fun newInstance(group: Group): GroupDetailsDialog {            val args = Bundle().apply {                putSerializable("group", group)            }            return GroupDetailsDialog().apply {                arguments = args            }        }    }    private fun formatTimestamp(timestamp: Timestamp?): String {        return timestamp?.toDate()?.let {            val sdf = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault())            sdf.format(it)        } ?: "Fecha no disponible"    }}