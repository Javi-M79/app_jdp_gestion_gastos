import android.animation.Animatorimport android.animation.AnimatorListenerAdapterimport android.animation.ObjectAnimatorimport android.app.AlertDialogimport android.app.Dialogimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.widget.Buttonimport android.widget.TextViewimport android.widget.Toastimport androidx.fragment.app.DialogFragmentimport androidx.lifecycle.lifecycleScopeimport com.example.app_jdp_gestion_gastos.Rimport com.example.app_jdp_gestion_gastos.data.model.Groupimport com.example.app_jdp_gestion_gastos.data.model.Userimport com.example.app_jdp_gestion_gastos.data.repository.GroupRepositoryimport com.example.app_jdp_gestion_gastos.ui.group.SelectUserDialogimport com.google.firebase.firestore.FirebaseFirestoreimport kotlinx.coroutines.launchimport kotlinx.coroutines.tasks.awaitimport java.text.SimpleDateFormatimport java.util.Localeclass GroupDetailsDialog(    private var group: Group,    private val repository: GroupRepository) : DialogFragment() {    private lateinit var tvMembers: TextView    private lateinit var tvCreatedBy: TextView    private var membersUsers: List<User> = emptyList()    companion object {        fun newInstance(group: Group): GroupDetailsDialog {            val dialog = GroupDetailsDialog(group, GroupRepository())            val args = Bundle()            args.putString("group_id", group.id)            dialog.arguments = args            return dialog        }    }    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        val view = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_group_details, null)        val tvGroupName = view.findViewById<TextView>(R.id.tvGroupName)        tvCreatedBy = view.findViewById(R.id.tvCreatedBy)        tvMembers = view.findViewById(R.id.tvMembers)        val tvCreatedAt = view.findViewById<TextView>(R.id.tvCreatedAt)        val btnClose = view.findViewById<Button>(R.id.btnClose)        val btnAddMember = view.findViewById<Button>(R.id.btnAddMember)        val btnRemoveMember = view.findViewById<Button>(R.id.btnRemoveMember)        tvGroupName.text = group.name        group.createdAt?.let { createdAt ->            val dateString = when (createdAt) {                is com.google.firebase.Timestamp -> {                    val date = createdAt.toDate()                    SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault()).format(date)                }                else -> "Fecha no disponible"            }            tvCreatedAt.text = "Fecha de creación: $dateString"        } ?: run {            tvCreatedAt.text = "Fecha de creación: No disponible"        }        if (!group.createdBy.isNullOrEmpty()) {            lifecycleScope.launch {                try {                    val querySnapshot = FirebaseFirestore.getInstance()                        .collection("users")                        .whereEqualTo("email", group.createdBy)                        .get()                        .await()                    val doc = querySnapshot.documents.firstOrNull()                    val userName = doc?.getString("name") ?: "Desconocido"                    tvCreatedBy.text = "Creado por: $userName"                } catch (e: Exception) {                    Log.e("GroupDetailsDialog", "Error al obtener creador: ${e.message}")                    tvCreatedBy.text = "Creado por: No disponible"                }            }        } else {            tvCreatedBy.text = "Creado por: No disponible"        }        loadGroupDetails()        btnClose.setOnClickListener { dismiss() }        btnAddMember.setOnClickListener { showSelectUserDialog() }        btnRemoveMember.setOnClickListener { showRemoveUserDialog() }        return AlertDialog.Builder(requireContext())            .setView(view)            .create()    }    private fun loadGroupDetails() {        val db = FirebaseFirestore.getInstance()        val groupRef = db.collection("groups").document(group.id)        groupRef.addSnapshotListener { snapshot, error ->            if (error != null) {                Log.e("GroupDetailsDialog", "Error escuchando grupo: ${error.message}")                tvMembers.text = "Error al cargar miembros"                return@addSnapshotListener            }            if (snapshot != null && snapshot.exists()) {                val updatedGroup = snapshot.toObject(Group::class.java)                if (updatedGroup != null) {                    group = updatedGroup // actualizar la variable group                    loadUsersFromEmails(group.members)                }            }        }    }    private fun loadUsersFromEmails(emails: List<String>) {        lifecycleScope.launch {            try {                val db = FirebaseFirestore.getInstance()                val usersCollection = db.collection("users")                val usersList = mutableListOf<User>()                for (email in emails) {                    val querySnapshot = usersCollection                        .whereEqualTo("email", email)                        .get().await()                    val doc = querySnapshot.documents.firstOrNull()                    val user = doc?.toObject(User::class.java)?.apply {                        this.id = doc.id                    }                    if (user != null) usersList.add(user)                }                membersUsers = usersList                updateMembersTextView()            } catch (e: Exception) {                Log.e("GroupDetailsDialog", "Error cargando usuarios: ${e.message}")                tvMembers.text = "Error al cargar miembros"            }        }    }    private fun showSelectUserDialog() {        lifecycleScope.launch {            try {                val allUsers = repository.getAllUsers()                val availableUsers = allUsers.filterNot { user ->                    group.members.contains(user.mail)                }                if (availableUsers.isNotEmpty()) {                    val dialog = SelectUserDialog(availableUsers) { selectedUser ->                        addMemberToGroup(selectedUser)                    }                    dialog.show(parentFragmentManager, "SelectUserDialog")                } else {                    AlertDialog.Builder(requireContext())                        .setMessage("No hay usuarios disponibles para añadir.")                        .setPositiveButton("OK", null)                        .show()                }            } catch (e: Exception) {                Log.e("GroupDetailsDialog", "Error al cargar usuarios para añadir: ${e.message}")            }        }    }    private fun showRemoveUserDialog() {        if (membersUsers.isEmpty()) return        val names = membersUsers.map { it.name }.toTypedArray()        AlertDialog.Builder(requireContext())            .setTitle("Eliminar miembro")            .setItems(names) { _, which ->                val selectedUser = membersUsers[which]                confirmRemoveUser(selectedUser)            }            .setNegativeButton("Cancelar", null)            .show()    }    private fun confirmRemoveUser(user: User) {        AlertDialog.Builder(requireContext())            .setTitle("Confirmar eliminación")            .setMessage("¿Eliminar a ${user.name} del grupo?")            .setPositiveButton("Eliminar") { _, _ ->                lifecycleScope.launch {                    try {                        // Usar removeUserFromGroup del repositorio con email                        repository.removeUserFromGroup(group.id, user.mail)                        // Actualizar la lista local                        val updatedMembers = group.members.toMutableList()                        updatedMembers.remove(user.mail)                        group = group.copy(members = updatedMembers)                        loadGroupDetails()                        Toast.makeText(context, "${user.name} eliminado", Toast.LENGTH_SHORT).show()                    } catch (e: Exception) {                        Log.e("GroupDetailsDialog", "Error eliminando miembro: ${e.message}")                    }                }            }            .setNegativeButton("Cancelar", null)            .show()    }    private fun addMemberToGroup(user: User) {        lifecycleScope.launch {            try {                if (!group.members.contains(user.mail)) {                    repository.addUserToGroup(group.id, user.mail)                    val updatedMembers = group.members.toMutableList()                    updatedMembers.add(user.mail)                    group = group.copy(members = updatedMembers)                    loadGroupDetails()                }            } catch (e: Exception) {                Log.e("GroupDetailsDialog", "Error añadiendo miembro: ${e.message}")            }        }    }    private fun updateMembersTextView() {        val names = membersUsers.joinToString(", ") { it.name }        animateTextChange(tvMembers, "Miembros: $names")    }    private fun animateTextChange(view: TextView, newText: String) {        val fadeOut = ObjectAnimator.ofFloat(view, View.ALPHA, 1f, 0f)        fadeOut.duration = 150        fadeOut.addListener(object : AnimatorListenerAdapter() {            override fun onAnimationEnd(animation: Animator) {                view.text = newText                val fadeIn = ObjectAnimator.ofFloat(view, View.ALPHA, 0f, 1f)                fadeIn.duration = 150                fadeIn.start()            }        })        fadeOut.start()    }}