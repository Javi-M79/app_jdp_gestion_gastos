import android.animation.Animatorimport android.animation.AnimatorListenerAdapterimport android.animation.ObjectAnimatorimport android.app.AlertDialogimport android.app.Dialogimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.widget.Buttonimport android.widget.TextViewimport android.widget.Toastimport androidx.fragment.app.DialogFragmentimport androidx.lifecycle.lifecycleScopeimport com.example.app_jdp_gestion_gastos.Rimport com.example.app_jdp_gestion_gastos.data.model.Groupimport com.example.app_jdp_gestion_gastos.data.model.Userimport com.example.app_jdp_gestion_gastos.data.repository.GroupRepositoryimport com.example.app_jdp_gestion_gastos.ui.group.SelectUserDialogimport com.google.firebase.firestore.FirebaseFirestoreimport kotlinx.coroutines.launchimport kotlinx.coroutines.tasks.awaitimport java.text.SimpleDateFormatimport java.util.Dateimport java.util.Localeclass GroupDetailsDialog(    private var group: Group,    private val repository: GroupRepository) : DialogFragment() {    private lateinit var tvMembers: TextView    private lateinit var tvCreatedBy: TextView    private var membersUsers: List<User> = emptyList()    companion object {        fun newInstance(group: Group): GroupDetailsDialog {            val dialog = GroupDetailsDialog(group, GroupRepository())            val args = Bundle()            args.putString("group_id", group.id)            dialog.arguments = args            return dialog        }    }    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        val view = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_group_details, null)        val tvGroupName = view.findViewById<TextView>(R.id.tvGroupName)        tvCreatedBy = view.findViewById(R.id.tvCreatedBy)        tvMembers = view.findViewById(R.id.tvMembers)        val tvCreatedAt = view.findViewById<TextView>(R.id.tvCreatedAt)        val tvExpenses = view.findViewById<TextView>(R.id.tvExpenses)        val btnClose = view.findViewById<Button>(R.id.btnClose)        val btnAddMember = view.findViewById<Button>(R.id.btnAddMember)        tvGroupName.text = group.name        tvExpenses.text = "Gastos: ${group.expenses.size}"        group.createdAt?.let { createdAt ->            val dateString = when (createdAt) {                is com.google.firebase.Timestamp -> {                    val date = createdAt.toDate()                    SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault()).format(date)                }                is Long -> {                    val date = Date(createdAt)                    SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault()).format(date)                }                is String -> {                    val longValue = createdAt.toLongOrNull()                    if (longValue != null) {                        val date = Date(longValue)                        SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault()).format(date)                    } else {                        "Fecha inválida"                    }                }                else -> "Formato desconocido"            }            tvCreatedAt.text = "Fecha de creación: $dateString"        } ?: run {            tvCreatedAt.text = "Fecha de creación: No disponible"        }        val createdByUid = group.createdBy        if (!createdByUid.isNullOrEmpty()) {            FirebaseFirestore.getInstance().collection("users")                .document(createdByUid)                .get()                .addOnSuccessListener { document ->                    val userName = document.getString("name") ?: "Desconocido"                    tvCreatedBy.text = "Creado por: $userName"                }                .addOnFailureListener {                    tvCreatedBy.text = "Creado por: No disponible"                    Log.e("GroupDetailsDialog", "Error obteniendo creador: ${it.message}")                }        } else {            tvCreatedBy.text = "Creado por: No disponible"        }        loadGroupDetails()        btnClose.setOnClickListener {            dismiss()        }        btnAddMember.setOnClickListener {            showSelectUserDialog()        }        val btnRemoveMember = view.findViewById<Button>(R.id.btnRemoveMember)        btnRemoveMember.setOnClickListener {            showRemoveUserDialog()        }        return AlertDialog.Builder(requireContext())            .setView(view)            .create()    }    private fun loadGroupDetails() {        lifecycleScope.launch {            try {                val db = FirebaseFirestore.getInstance()                val usersCollection = db.collection("users")                val miembros = group.members ?: emptyList()                Log.d("GroupDetailsDialog", "Miembros del grupo: $miembros")                val usersList = mutableListOf<User>()                for (miembro in miembros) {                    val user: User? = if (miembro.contains("@")) {                        val querySnapshot = usersCollection.whereEqualTo("mail", miembro).get().await()                        querySnapshot.documents.firstOrNull()?.toObject(User::class.java)?.apply {                            this.id = querySnapshot.documents.firstOrNull()?.id                        }                    } else {                        val docSnapshot = usersCollection.document(miembro).get().await()                        docSnapshot.toObject(User::class.java)?.apply {                            this.id = docSnapshot.id                        }                    }                    if (user != null) {                        usersList.add(user)                    }                }                membersUsers = usersList                updateMembersTextView()                Log.d("GroupDetailsDialog", "Usuarios cargados: ${usersList.size}")            } catch (e: Exception) {                Log.e("GroupDetailsDialog", "Error cargando usuarios: ${e.message}")            }        }    }    private fun showSelectUserDialog() {        lifecycleScope.launch {            try {                val allUsers = repository.getAllUsers()                val availableUsers = allUsers.filterNot { user ->                    group.members.contains(user.mail)                }                if (availableUsers.isNotEmpty()) {                    val dialog = SelectUserDialog(availableUsers) { selectedUser ->                        addMemberToGroup(selectedUser)                    }                    dialog.show(parentFragmentManager, "SelectUserDialog")                } else {                    AlertDialog.Builder(requireContext())                        .setMessage("No hay usuarios disponibles para añadir.")                        .setPositiveButton("OK", null)                        .show()                }            } catch (e: Exception) {                e.printStackTrace()            }        }    }    private fun showRemoveUserDialog() {        if (membersUsers.isEmpty()) return        val names = membersUsers.map { it.name }.toTypedArray()        Log.d("GroupDetailsDialog", "Miembros para eliminar: ${names.joinToString(", ")}")        AlertDialog.Builder(requireContext())            .setTitle("Eliminar miembro")            .setItems(names) { _, which ->                val selectedUser = membersUsers[which]                confirmRemoveUser(selectedUser)            }            .setNegativeButton("Cancelar", null)            .show()    }    private fun confirmRemoveUser(user: User) {        AlertDialog.Builder(requireContext())            .setTitle("Confirmar eliminación")            .setMessage("¿Eliminar a ${user.name} del grupo?")            .setPositiveButton("Eliminar") { _, _ ->                lifecycleScope.launch {                    try {                        val updatedMembers = group.members.toMutableList()                        if (updatedMembers.contains(user.mail)) {                            updatedMembers.remove(user.mail)                        } else if (user.id != null && updatedMembers.contains(user.id)) {                            updatedMembers.remove(user.id)                        }                        FirebaseFirestore.getInstance()                            .collection("groups")                            .document(group.id)                            .update("members", updatedMembers)                            .addOnSuccessListener {                                Toast.makeText(context, "${user.name} eliminado", Toast.LENGTH_SHORT).show()                                loadGroupDetails()                            }                            .addOnFailureListener { e ->                                Log.e("GroupDetailsDialog", "Error eliminando miembro: ${e.message}")                            }                    } catch (e: Exception) {                        Log.e("GroupDetailsDialog", "Error inesperado: ${e.message}")                    }                }            }            .setNegativeButton("Cancelar", null)            .show()    }    private fun addMemberToGroup(user: User) {        lifecycleScope.launch {            try {                val updatedMembers = group.members.toMutableList()                if (!updatedMembers.contains(user.mail)) {                    updatedMembers.add(user.mail)                    repository.updateGroupMembers(group.id, updatedMembers)                    group = group.copy(members = updatedMembers)                    loadGroupDetails()                    Log.d("GroupDetailsDialog", "Miembros actualizados: ${group.members}")                }            } catch (e: Exception) {                e.printStackTrace()            }        }    }    private fun removeMemberFromGroup(user: User) {        lifecycleScope.launch {            try {                val updatedMembers = group.members.toMutableList()                updatedMembers.remove(user.mail)                repository.updateGroupMembers(group.id, updatedMembers)                group = group.copy(members = updatedMembers)                loadGroupDetails()            } catch (e: Exception) {                e.printStackTrace()            }        }    }    private fun updateMembersTextView() {        val names = membersUsers.joinToString(", ") { it.name }        animateTextChange(tvMembers, "Miembros: $names")    }    private fun animateTextChange(view: TextView, newText: String) {        val fadeOut = ObjectAnimator.ofFloat(view, View.ALPHA, 1f, 0f)        fadeOut.duration = 150        fadeOut.addListener(object : AnimatorListenerAdapter() {            override fun onAnimationEnd(animation: Animator) {                view.text = newText                val fadeIn = ObjectAnimator.ofFloat(view, View.ALPHA, 0f, 1f)                fadeIn.duration = 150                fadeIn.start()            }        })        fadeOut.start()    }}