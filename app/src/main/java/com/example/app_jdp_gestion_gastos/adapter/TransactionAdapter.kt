import android.graphics.Colorimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.RecyclerViewimport com.example.app_jdp_gestion_gastos.Rimport com.example.app_jdp_gestion_gastos.data.model.Transactionimport com.example.app_jdp_gestion_gastos.databinding.ItemTransactionBindingclass TransactionAdapter(private val transactions: MutableList<Transaction>) : RecyclerView.Adapter<TransactionAdapter.TransactionViewHolder>() {    private var selectedPosition = RecyclerView.NO_POSITION // Posición seleccionada, inicialmente ningún item está seleccionado    private var onSelectionChangedListener: ((Boolean) -> Unit)? = null // Listener para cambios de selección    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TransactionViewHolder {        val binding = ItemTransactionBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return TransactionViewHolder(binding)    }    override fun onBindViewHolder(holder: TransactionViewHolder, position: Int) {        val transaction = transactions[position]        holder.bind(transaction, position)    }    override fun getItemCount(): Int = transactions.size    // Método para agregar una nueva transacción    fun addTransaction(transaction: Transaction) {        transactions.add(transaction)        notifyItemInserted(transactions.size - 1)    }    // Método para obtener la posición seleccionada    fun getSelectedPosition(): Int = selectedPosition    // Método para eliminar una transacción    fun removeTransaction(position: Int) {        if (position != RecyclerView.NO_POSITION) {            transactions.removeAt(position)            notifyItemRemoved(position)        }    }    // Establecer el listener para la selección    fun setOnSelectionChangedListener(listener: (Boolean) -> Unit) {        onSelectionChangedListener = listener    }    inner class TransactionViewHolder(private val binding: ItemTransactionBinding) : RecyclerView.ViewHolder(binding.root) {        init {            itemView.setOnClickListener {                // Actualizamos la posición seleccionada                val previouslySelectedPosition = selectedPosition                selectedPosition = if (selectedPosition == adapterPosition) RecyclerView.NO_POSITION else adapterPosition                // Notificamos el cambio de selección                onSelectionChangedListener?.invoke(selectedPosition != RecyclerView.NO_POSITION)                // Si la posición seleccionada cambió, actualizamos el RecyclerView                if (previouslySelectedPosition != selectedPosition) {                    notifyItemChanged(previouslySelectedPosition)                    notifyItemChanged(selectedPosition)                }            }        }        fun bind(transaction: Transaction, position: Int) {            binding.tvDescription.text = transaction.description            binding.tvAmount.text = "$${"%.2f".format(transaction.amount)}"            binding.tvDate.text = transaction.date            // Verificamos si la transacción está seleccionada            if (position == selectedPosition) {                binding.root.setBackgroundColor(Color.LTGRAY) // Seleccionado            } else {                binding.root.setBackgroundColor(Color.WHITE) // No seleccionado            }            // Icono de la transacción            transaction.icon?.let {                binding.ivIcon.setImageResource(it)            } ?: run {                binding.ivIcon.setImageResource(R.drawable.otros)            }        }    }}