package com.example.app_jdp_gestion_gastos.ui.viewmodelsimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.app_jdp_gestion_gastos.data.model.Groupimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.ktx.toObjectsclass GroupsViewModel : ViewModel() {    private val db = FirebaseFirestore.getInstance()    private val auth = FirebaseAuth.getInstance()    private val _groups = MutableLiveData<List<Group>>()    val groups: LiveData<List<Group>> get() = _groups    private val _isLoading = MutableLiveData<Boolean>(true)    val isLoading: LiveData<Boolean> get() = _isLoading    private val _selectedGroup = MutableLiveData<Group?>()    val selectedGroup: LiveData<Group?> get() = _selectedGroup    init {        loadGroups()    }    private fun loadGroups() {        val userId = auth.currentUser?.uid        if (userId != null) {            db.collection("groups")                .whereArrayContains("members", userId)                .addSnapshotListener { snapshot, error ->                    if (error != null) {                        Log.e("GroupsViewModel", "Error al cargar grupos", error)                        return@addSnapshotListener                    }                    snapshot?.let {                        _groups.value = it.documents.map { document ->                            val group = document.toObject(Group::class.java)                            group?.id = document.id  // Asigna manualmente el ID del documento                            group                        }.filterNotNull()                    }                    _isLoading.value = false                }        } else {            Log.e("GroupsViewModel", "Usuario no autenticado")            _isLoading.value = false        }    }    fun createGroup(name: String) {        val userId = auth.currentUser?.uid ?: return        val newGroupRef = db.collection("groups").document()        val newGroup = Group(            id = newGroupRef.id,            name = name,            createdBy = userId,            members = listOf(userId),            createdAt = com.google.firebase.Timestamp.now()        )        newGroupRef.set(newGroup)            .addOnSuccessListener {                Log.d("GroupsViewModel", "Grupo creado con éxito")                loadGroups() // Forzar recarga inmediata            }            .addOnFailureListener { exception ->                Log.e("GroupsViewModel", "Error creando grupo", exception)            }    }    fun selectGroup(group: Group) {        _selectedGroup.value = group    }    fun deleteSelectedGroup() {        val group = _selectedGroup.value ?: return        if (group.id.isBlank()) {            Log.e("GroupsViewModel", "Error: El ID del grupo es nulo o vacío")            return        }        db.collection("groups").document(group.id)            .delete()            .addOnSuccessListener {                _selectedGroup.value = null                Log.d("GroupsViewModel", "Grupo eliminado correctamente")            }            .addOnFailureListener { e ->                Log.e("GroupsViewModel", "Error eliminando grupo", e)            }    }}